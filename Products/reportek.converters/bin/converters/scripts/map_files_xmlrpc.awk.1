# XMLgawk script to map files in WFD envelopes
# CDR input: xmlrpc_search_shapefile[?country=CC]
#
# Hermann, March 2010

# Load the XML extension 
@load xml

BEGIN { 
	# Set XMLMODE so that the XML parser reads strictly
	# compliant XML data. Convert characters to XMLCHARSET
	XMLMODE = 1
	XMLCHARSET = "UTF-8" 

	# Strings for file name mapping
	STRING["1RB"] = STRING["2SU"] = "_RBDSU_"
	STRING["3PA"] = "_PA_"
	STRING["4GW"] = "_GWB?_"
	STRING["5CW"] = "_SWB?_CW_"
	STRING["6LW"] = "_SWB?_LW_"
	STRING["7RW"] = "_SWB?_RW_"
	STRING["8TW"] = "_SWB?_TW_"

	# Schemas for file name mapping
	SCHEMA["1RB"] = SCHEMA["2SU"] = \
	"http://water.eionet.europa.eu/schemas/dir200060ec/RBDSUCA_3p0.xsd"

	SCHEMA["3PA"] = "http://water.eionet.europa.eu/schemas/dir200060ec/ProtArea_3p0.xsd"
	SCHEMA["4GW"] =	"http://water.eionet.europa.eu/schemas/dir200060ec/GWB_3p0.xsd"

	SCHEMA["5CW"] = SCHEMA["6LW"] = SCHEMA["7RW"] =  SCHEMA["8TW"] = \
	"http://water.eionet.europa.eu/schemas/dir200060ec/SWB_3p0.xsd"
}

# Character data will not be lost, but clear variable first
XMLSTARTELEM	{ chardata = "" }
XMLCHARDATA		{ chardata = $0 }

# Remember relevant attribute values
# XMLSTARTELEM == "file" && XMLATTR["locality"] && XMLATTR["isreleased"] {
XMLSTARTELEM == "file" && XMLATTR["locality"] {

	iup = toupper(XMLATTR["id"])
	num = split(iup, F, ".")
	loc = XMLATTR["locality"] ; LCTY[loc]
	rel = XMLATTR["released"]
	sch = XMLATTR["schema"]
	url = XMLATTR["url"]

	if (sch) {

		if (rel > TIME[loc,sch] + 0) {
			FILE[loc,sch] = url
			TIME[loc,sch] = rel
		}

	} else if (F[num] == "DBF") {

		for (i in STRING) {

			str = STRING[i]

			if (iup ~ str && rel >= TIME[loc,str] + 0) {
	
				# There can be several files...
				if (str != "_RBDSU_" && rel == TIME[loc,str])
					FILE[loc,str] = FILE[loc,str] "|" url
				else
					FILE[loc,str] = url

				TIME[loc,str] = rel
			}
		}
	}
}

# Print file mapping
XMLENDELEM == "results" {

	for (i in LCTY)
		for (j in STRING) {

			key1 = i SUBSEP SCHEMA[j]
			key2 = i SUBSEP STRING[j]
			type = substr(j,2)

			if (key1 in FILE && key2 in FILE) {

				# Handle cases with multiple dbf files
				split(FILE[key2], DBF, "|")
				for (file in DBF)
					print type, FILE[key1], DBF[file]
			}
		}

	#	For debugging
	if (debug) {

		print ORS "+++ Elements in LCTY +++" ORS

		for (i in LCTY)
			print i

		print ORS "+++ Elements in TIME +++" ORS

		for (i in TIME)
			print i " = " TIME[i]

		print ORS "+++ Elements in FILE +++" ORS

		for (i in FILE)
			print i " = " FILE[i]
	}
}

# Print XML errors errors, if any
END {
	if (XMLERROR)
		printf("XMLERROR '%s' at row %d col %d len %d\n",
		XMLERROR, XMLROW, XMLCOL, XMLLEN)
}

# vim: tw=100 ts=4 sw=4
